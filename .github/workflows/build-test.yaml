name: Test

permissions: write-all

on:
  workflow_call:
    inputs:
      generate_coverage:
        description: "Flag to determine if coverage should be generated"
        required: false
        type: boolean
        default: true
    secrets:
      MY_GITHUB_TOKEN:
        required: true

jobs:
  cleanup:
    runs-on: ubuntu-latest

    steps:
      - name: Delete deployment
        uses: strumwolf/delete-deployment-environment@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          environment: github-pages
          onlyRemoveDeployments: true

  test_and_documentation:
    runs-on: ubuntu-latest
    needs: cleanup
    steps:
      - name: Install gcc13 and g++13
        run: |
          sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y
          sudo apt-get update
          sudo apt-get install gcc-13 g++-13 -y
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-13 100
          sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-13 100
          sudo update-alternatives --install /usr/bin/gcov gcov /usr/bin/gcov-13 100

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y graphviz python3-pip

      - name: Install lcov
        run: |
          sudo apt-get install -y libcapture-tiny-perl libjson-xs-perl libdatetime-perl libdevel-cover-perl libdigest-md5-perl libfile-spec-perl libmodule-load-conditional-perl libtime-hires-perl
          wget https://github.com/linux-test-project/lcov/releases/download/v2.1/lcov-2.1.tar.gz
          tar -xzf lcov-2.1.tar.gz
          cd lcov-2.1
          sudo make install
          cd ..
          sudo rm -rf lcov-2.1 lcov-2.1.tar.gz
          pip install coverage

      - name: Install doxygen
        run: |
          wget https://github.com/doxygen/doxygen/releases/download/Release_1_11_0/doxygen-1.11.0.linux.bin.tar.gz
          tar -xzf doxygen-1.11.0.linux.bin.tar.gz
          cd doxygen-1.11.0
          sudo make
          sudo make install
          cd ..
          sudo rm -rf doxygen-1.11.0 doxygen-1.11.0.linux.bin.tar.gz

      - name: Install python dependencies
        run: |
          sudo pip install -U rosdep
          pip install empy==3.3.4 colcon-common-extensions==0.3.0 colcon-lcov-result vcstool mike python-markdown-math

      - name: Create the src dir
        run: |
          mkdir -p ${{ github.workspace }}/src/${{ github.event.repository.name }}

      - name: Checkout the repository
        uses: actions/checkout@v4
        with:
          path: src/${{ github.event.repository.name }}/

      - name: Parse dependencies.repos and insert token
        env:
          GH_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}
        run: |
          if [ -f src/${{ github.event.repository.name }}/dependencies.repos ]; then
            sed -i "s|https://|https://${GH_TOKEN}@|g" src/${{ github.event.repository.name }}/dependencies.repos
          fi

      - name: Install dependencies with vcs
        run: |
          if [ -f src/${{ github.event.repository.name }}/dependencies.repos ]; then
            vcs import src < src/${{ github.event.repository.name }}/dependencies.repos
          fi

      - name: Install requirements from python-requirements.txt
        run: |
          if [ -f src/${{ github.event.repository.name }}/python-requirements.txt ]; then
            pip install -r src/${{ github.event.repository.name }}/python-requirements.txt
          fi

      - name: Install dependencies with rosdep
        run: |
          sudo apt update && sudo apt install curl -y
          sudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(. /etc/os-release && echo $UBUNTU_CODENAME) main" | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null
          sudo apt update
          sudo rosdep init
          rosdep update
          rosdep install --from-paths src --ignore-src --rosdistro humble

      - name: Build the workspace
        run: |
          source /opt/ros/humble/setup.bash
          colcon build --symlink-install --cmake-args -DCMAKE_CXX_FLAGS='-fprofile-arcs -ftest-coverage -fno-elide-constructors -fno-default-inline -ffunction-sections' -DCMAKE_C_FLAGS='-fprofile-arcs -ftest-coverage'

      - name: Test and generate code coverage
        run: |
          source /opt/ros/humble/setup.bash
          if ${{ inputs.generate_coverage }}
          then
            colcon lcov-result --initial --packages-select ${{ github.event.repository.name }}
          fi
          colcon test --event-handlers console_direct+ --packages-select ${{ github.event.repository.name }} --return-code-on-test-failure
          if ${{ inputs.generate_coverage }}
          then
          echo -e "geninfo_auto_base = 1\ngenhtml_num_spaces = 2\ngenhtml_legend = 1\ngenhtml_function_coverage = 0\ngenhtml_branch_coverage = 0\ngeninfo_external = 0\nstop_on_error = 0\nlcov_quiet = 1\nlcov_function_coverage = 0\nbranch_coverage = 0\nlcov_follow = 1\nignore_errors=unused" > ${{ github.workspace }}/lcovrc
          cd src
          ORIGINAL_PACKAGE=${{ github.event.repository.name }}
          EXCLUDED_DIRS=$(find . -mindepth 1 -maxdepth 1 -type d ! -name "$ORIGINAL_PACKAGE" -printf '%P\n')
          cd ..
          FILTER_PATTERNS=()
          for dir in $EXCLUDED_DIRS; do
            FILTER_PATTERNS+=("src/$dir/*")
          done
          FILTER_PATTERNS+=("*/test/*" "build/*" "/usr/*" "/opt/*" "install/*")
          colcon lcov-result --filter "${FILTER_PATTERNS[@]}" --packages-select $ORIGINAL_PACKAGE --lcov-config-file ${{ github.workspace }}/lcovrc
          fi

      - name: Get documentation directory for deployment
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "DEPLOY_REF=PR-${{ github.event.number }}" >> $GITHUB_ENV
          else
            cd ${{ github.workspace }}/src/${{ github.event.repository.name }}
            git fetch --tags
            TAG=$(git describe --tags --abbrev=0)
            VERSION=${TAG%.*}
            echo "DEPLOY_REF=${VERSION}" >> $GITHUB_ENV
          fi

      - name: Generate example documentation
        run: |
          git clone https://github.com/Robotsix-UAV/example_cpp_to_md
          python3 example_cpp_to_md/example_cpp_to_md.py ${{ github.workspace }}/src/${{ github.event.repository.name }}/examples ${{ github.workspace }}/src/${{ github.event.repository.name }}/docs

      - name: Create and push with mike
        run: |
          git config --global user.name robotsix_bot
          git config --global user.email robotsix_bot@noreply.com
          cd ${{ github.workspace }}/src/${{ github.event.repository.name }}
          git fetch origin gh-pages --depth=1 || true
          mike deploy ${{ env.DEPLOY_REF }} -b gh-pages -p

      - name: Build rosdoc2 Documentation
        shell: bash
        run: |
          git clone https://github.com/ros-infrastructure/rosdoc2
          cd rosdoc2
          pip install .
          cd ${{ github.workspace }}
          rosdoc2 build -p ${{ github.workspace }}/src/${{ github.event.repository.name }}
          cp /home/runner/work/${{ github.event.repository.name }}/${{ github.event.repository.name }}/docs_build/${{ github.event.repository.name }}/${{ github.event.repository.name }}-public-cc-api/doxygen-warnings.log . || true

      - name: Display doxygen warnings
        run: |
          if [ -f doxygen-warnings.log ]; then
            cat doxygen-warnings.log
          fi

      - name: Parse and Comment on Pull Request
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v5
        with:
          script: |
            const fs = require('fs');
            const path = 'doxygen-warnings.log';

            // Check if the log file exists and is not empty
            if (fs.existsSync(path) && fs.statSync(path).size > 0) {
              const warnings = fs.readFileSync(path, 'utf8').trim().split('\n');
              let commentBody = "### :warning: Doxygen Warnings Found\n";
              commentBody += "Here are the details of the warnings:\n```\n";

              warnings.forEach(warning => {
                commentBody += `${warning}\n`;
              });

              commentBody += "```\nPlease review the warnings and make necessary changes.";

              // Create a comment on the PR
              console.log('Posting comment with Doxygen warnings');
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number, // This assumes the action is triggered by a pull_request event
                body: commentBody
              });
            } else {
              console.log('No Doxygen warnings log file found or the file is empty.');
            }

      - name: Clone and checkout gh-pages branch
        uses: actions/checkout@v4
        with:
          ref: gh-pages
          path: ${{ github.event.repository.name }}

      - name: Fetch gh-pages branch
        run: |
          cd ${{ github.event.repository.name }}
          git fetch origin gh-pages --depth=1

      - name: Copy lcov results
        run: |
          if ${{ inputs.generate_coverage }}
          then
          cd ${{ github.event.repository.name }}
          mkdir -p ${{ env.DEPLOY_REF }}
          cp -r ${{ github.workspace }}/lcov ${{ env.DEPLOY_REF }}
          fi

      - name: Generate badge
        run: |
          if ${{ inputs.generate_coverage }}
          then
          git clone https://github.com/damien-robotsix/lcov-badger.git
          python3 lcov-badger/lcov-badger.py ${{ github.event.repository.name }}/${{ env.DEPLOY_REF }}/lcov/total_coverage.info ${{ github.event.repository.name }}/${{ env.DEPLOY_REF }}/lcov/badge.svg
          fi

      - name: Upload Coverage Info as Artifact
        if: ${{ inputs.generate_coverage }}
        uses: actions/upload-artifact@v3
        with:
          name: coverage-info
          path: ${{ github.workspace }}/lcov/total_coverage.info

      - name: Copy generated documentation
        run: |
          cd ${{ github.event.repository.name }}
          mkdir -p ${{ env.DEPLOY_REF }}/dev
          cp -r ${{ github.workspace }}/docs_output/${{ github.event.repository.name }} ${{ env.DEPLOY_REF }}/dev

      - name: Push changes to gh-pages squashing commits
        run: |
          cd ${{ github.event.repository.name }}
          git add .
          git commit -m "Documentation deployment"
          git reset $(git commit-tree HEAD^{tree} -m "gh-pages")
          git remote set-url --push origin https://$damien-robotsix:${{ secrets.MY_GITHUB_TOKEN }}@github.com/${{ github.repository }}
          git push -f origin gh-pages
